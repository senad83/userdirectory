{"version":3,"sources":["components/SearchForm.js","components/ResultList.js","utils/API.js","components/SearchResultContainer.js","App.js","serviceWorker.js","index.js"],"names":["SearchForm","props","className","htmlFor","onChange","handleInputChange","value","search","name","type","placeholder","id","onClick","handleFormSubmit","handleSortByName","ResultList","class","aria-hidden","results","map","user","index","key","alt","first","src","picture","thumbnail","last","phone","email","dob","date","axios","get","SearchResultContainer","state","filteredResults","getUsers","API","then","res","setState","data","catch","err","console","log","filterUsers","lowerName","toLowerCase","filteredUsers","filter","includes","event","target","preventDefault","sortedUsers","sort","userOne","userTwo","this","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"oQA2BeA,MAzBf,SAAoBC,GAClB,OACE,8BACE,yBAAKC,UAAU,cACb,2BAAOC,QAAQ,UAAf,WACA,2BACEC,SAAUH,EAAMI,kBAChBC,MAAOL,EAAMM,OACbC,KAAK,SACLC,KAAK,OACLP,UAAU,eACVQ,YAAY,oBACZC,GAAG,WAEL,4BAAQC,QAASX,EAAMY,iBAAkBX,UAAU,wBAAnD,UAGA,4BAAQU,QAASX,EAAMa,iBAAkBZ,UAAU,wBAAnD,mBCeOa,MAhCf,SAAoBd,GAClB,OACE,2BAAOC,UAAU,uBACf,+BACE,4BACE,qCACA,mCAAQ,uBAAGc,MAAM,0BAA0BC,cAAY,UACvD,qCACA,qCACA,qCAGJ,+BAGGhB,EAAMiB,QAAQC,KAAI,SAACC,EAAMC,GAAP,OACjB,wBAAIC,IAAKD,GACP,4BAAI,yBAAKE,IAAKH,EAAKZ,KAAKgB,MAAOtB,UAAU,YAAYuB,IAAKL,EAAKM,QAAQC,aACvE,4BAAKP,EAAKZ,KAAKgB,MAAf,IAAuBJ,EAAKZ,KAAKoB,MACjC,4BAAKR,EAAKS,OACV,4BAAKT,EAAKU,OACV,4BAAKV,EAAKW,IAAIC,a,iBClBX,EACH,WACR,OAAOC,IAAMC,IALD,kDCsEDC,E,4MAlEbC,MAAQ,CACN7B,OAAQ,GACRW,QAAS,GACTmB,gBAAgB,I,EAQlBC,SAAU,WACRC,IACGC,MAAK,SAAAC,GAAG,OAAI,EAAKC,SAAS,CAAExB,QAASuB,EAAIE,KAAKzB,QAASmB,gBAAiBI,EAAIE,KAAKzB,aACjF0B,OAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,O,EAE9BG,YAAa,SAACxC,GACZ,IAAIyC,EAAYzC,EAAK0C,cAChBC,EAAgB,EAAKf,MAAMlB,QAAQkC,QAAQ,SAAChC,GAE7C,OAAOA,EAAKZ,KAAKgB,MAAM0B,cAAcG,SAASJ,IAAc7B,EAAKZ,KAAKoB,KAAKsB,cAAcG,SAASJ,MAErG,EAAKP,SAAS,CACZL,gBAAgBc,K,EAIrB9C,kBAAoB,SAAAiD,GAClB,IAAM9C,EAAO8C,EAAMC,OAAO/C,KACpBF,EAAQgD,EAAMC,OAAOjD,MAC3B,EAAKoC,SAAL,eACGlC,EAAOF,K,EAKZO,iBAAmB,SAAAyC,GACjBA,EAAME,iBACN,EAAKR,YAAY,EAAKZ,MAAM7B,S,EAG9BO,iBAAmB,SAACwC,GACjBA,EAAME,iBACN,IAAIC,EAAc,EAAKrB,MAAMC,gBAAgBqB,MAAM,SAACC,EAASC,GAC7D,OAAQD,EAAQnD,KAAKoB,KAAOgC,EAAQpD,KAAKoB,KAAO,GAAG,KAEnD,EAAKc,SAAS,CACZL,gBAAgBoB,K,kEAvCrBI,KAAKvB,a,+BA4CH,OACE,6BACE,kBAAC,EAAD,CACE/B,OAAQsD,KAAKzB,MAAM7B,OACnBM,iBAAkBgD,KAAKhD,iBACvBR,kBAAmBwD,KAAKxD,kBACxBS,iBAAkB+C,KAAK/C,mBAEzB,kBAAC,EAAD,CAAYI,QAAS2C,KAAKzB,MAAMC,uB,GA7DJyB,aCErBC,MAJf,WACE,OAAO,kBAAC,EAAD,OCQWC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBpC,MAAK,SAAAqC,GACJA,EAAaC,gBAEdlC,OAAM,SAAAmC,GACLjC,QAAQiC,MAAMA,EAAMC,c","file":"static/js/main.b68b9671.chunk.js","sourcesContent":["import React from \"react\";\n\nfunction SearchForm(props) {\n  return (\n    <form>\n      <div className=\"form-group\">\n        <label htmlFor=\"search\">Search:</label>\n        <input\n          onChange={props.handleInputChange}\n          value={props.search}\n          name=\"search\"\n          type=\"text\"\n          className=\"form-control\"\n          placeholder=\"Search for a name\"\n          id=\"search\"\n        />\n        <button onClick={props.handleFormSubmit} className=\"btn btn-primary mt-3\">\n          Search\n        </button>\n        <button onClick={props.handleSortByName} className=\"btn btn-primary mt-3\">\n          Sort by name\n        </button>\n      </div>\n    </form>\n  );\n}\n\nexport default SearchForm;\n","import React from \"react\";\n\nfunction ResultList(props) {\n  return (\n    <table className=\"table table-striped\">\n      <thead>\n        <tr>\n          <th>Image</th>\n          <th>Name<i class=\"fa fa-angle-double-down\" aria-hidden=\"true\"></i></th>\n          <th>Phone</th>\n          <th>Email</th>\n          <th>DOB</th>\n        </tr>\n      </thead>\n      <tbody>\n\n\n        {props.results.map((user, index) => (\n          <tr key={index}>\n            <td><img alt={user.name.first} className=\"img-fluid\" src={user.picture.thumbnail} /></td>\n            <td>{user.name.first} {user.name.last}</td>\n            <td>{user.phone}</td>\n            <td>{user.email}</td>\n            <td>{user.dob.date}</td>\n          </tr>\n\n        ))}\n\n      </tbody>\n    </table>\n\n  );\n}\n\nexport default ResultList;\n","import axios from \"axios\";\n\nconst BASEURL = \"https://randomuser.me/api/?results=200&nat=us\";\n\n// Export an object with a \"search\" method that searches the Giphy API for the passed query\nexport default {\n  getUsers: function() {\n    return axios.get(BASEURL);\n  }\n};\n","import React, { Component } from \"react\";\nimport SearchForm from \"./SearchForm\";\nimport ResultList from \"./ResultList\";\nimport API from \"../utils/API\";\n\nclass SearchResultContainer extends Component {\n  state = {\n    search: \"\",\n    results: [],\n    filteredResults:[]\n  };\n\n  // When this component mounts, search the Giphy API for pictures of kittens\n  componentDidMount() {\n  this.getUsers();\n  }\n\n  getUsers =() => {\n    API.getUsers()\n      .then(res => this.setState({ results: res.data.results, filteredResults: res.data.results }))\n      .catch(err => console.log(err));\n  };\n  filterUsers =(name) => {\n    let lowerName = name.toLowerCase();\n     let filteredUsers = this.state.results.filter ((user)=>{\n      \n        return user.name.first.toLowerCase().includes(lowerName) || user.name.last.toLowerCase().includes(lowerName) \n     })\n     this.setState({\n       filteredResults:filteredUsers\n     })\n  }\n\n  handleInputChange = event => {\n    const name = event.target.name;\n    const value = event.target.value;\n    this.setState({\n      [name]: value\n    });\n  };\n\n  // When the form is submitted, search the Giphy API for `this.state.search`\n  handleFormSubmit = event => {\n    event.preventDefault();\n    this.filterUsers(this.state.search);\n  };\n\n  handleSortByName = (event)=> {\n     event.preventDefault();\n     let sortedUsers = this.state.filteredResults.sort ((userOne, userTwo)=>{\n     return (userOne.name.last > userTwo.name.last)? 1:-1;\n     })\n     this.setState({\n       filteredResults:sortedUsers\n     })\n  }\n\n  render() {\n    return (\n      <div>\n        <SearchForm\n          search={this.state.search}\n          handleFormSubmit={this.handleFormSubmit}\n          handleInputChange={this.handleInputChange}\n          handleSortByName={this.handleSortByName}\n        />\n        <ResultList results={this.state.filteredResults} />\n      </div>\n    );\n  }\n}\n\nexport default SearchResultContainer;\n","import React from \"react\";\nimport SearchResultContainer from \"./components/SearchResultContainer\";\n\nfunction App() {\n  return <SearchResultContainer />;\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}